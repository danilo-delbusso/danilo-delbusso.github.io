{"componentChunkName":"component---src-templates-blog-post-js","path":"/pandas-hacks-reads-clipboard/","result":{"data":{"site":{"siteMetadata":{"title":"Danilo Del Busso","social":{"twitter":"danilo_delbusso"}}},"markdownRemark":{"id":"2341c13e-9194-5614-b248-13dab9d32f97","excerpt":"We’ve all been there: we’re reading an interesting piece of data on Kaggle, StackOverflow, or some obscure website on the second page of Google (yikes!), and it…","html":"<p>We’ve all been there: we’re reading an interesting piece of data on Kaggle, StackOverflow, or some obscure website on the second page of Google (yikes!), and it had enough shimmer to pique our curiosity to lure us to playing with it, because we (cool data science people) are just suckers for them sweet data insights. We ready our Jupyter notebooks, import our favorite EDA libraries, and prepare ourselves to explore our brand new data set.</p>\n<p>But wait — we hesitate. We realize that we have to go through all the trouble of downloading the data, saving it into the right folder, and importing the data set with the right folder path (oh the woes of a data scientist)! Simply put, no one has that kind of time. Well, we do, but if we were being honest with ourselves, small hurdles like these are usually what make us decide whether we go through with something or not. Luckily, there’s pandas.read_clipboard() to help us.</p>\n<h3>For Example</h3>\n<p>The pandas.read_clipboard() method is as simple as it sounds: it reads copy-pasted tabular data and parses it into a Data Frame. For instance, try running the method after copying the following Data Frame:</p>\n<p><div id=\"gist98627266\" class=\"gist\">\n    <div class=\"gist-file\">\n      <div class=\"gist-data\">\n        <div class=\"js-gist-file-update-container js-task-list-container file-box\">\n  <div id=\"file-random_dataframe-py\" class=\"file\">\n    \n\n  <div itemprop=\"text\" class=\"Box-body p-0 blob-wrapper data type-python \">\n      \n<table class=\"highlight tab-size js-file-line-container\" data-tab-size=\"8\" data-paste-markdown-skip>\n      <tr>\n        <td id=\"file-random_dataframe-py-L1\" class=\"blob-num js-line-number\" data-line-number=\"1\"></td>\n        <td id=\"file-random_dataframe-py-LC1\" class=\"blob-code blob-code-inner js-file-line\">           <span class=pl-c1>0</span>\t       <span class=pl-c1>1</span>\t       <span class=pl-c1>2</span>\t       <span class=pl-c1>3</span></td>\n      </tr>\n      <tr>\n        <td id=\"file-random_dataframe-py-L2\" class=\"blob-num js-line-number\" data-line-number=\"2\"></td>\n        <td id=\"file-random_dataframe-py-LC2\" class=\"blob-code blob-code-inner js-file-line\"><span class=pl-c1>0</span>\t<span class=pl-c1>0.850004</span>\t<span class=pl-c1>0.206778</span>\t<span class=pl-c1>0.655200</span>\t<span class=pl-c1>0.079339</span></td>\n      </tr>\n      <tr>\n        <td id=\"file-random_dataframe-py-L3\" class=\"blob-num js-line-number\" data-line-number=\"3\"></td>\n        <td id=\"file-random_dataframe-py-LC3\" class=\"blob-code blob-code-inner js-file-line\"><span class=pl-c1>1</span>\t<span class=pl-c1>0.948567</span>\t<span class=pl-c1>0.749701</span>\t<span class=pl-c1>0.116241</span>\t<span class=pl-c1>0.069551</span></td>\n      </tr>\n      <tr>\n        <td id=\"file-random_dataframe-py-L4\" class=\"blob-num js-line-number\" data-line-number=\"4\"></td>\n        <td id=\"file-random_dataframe-py-LC4\" class=\"blob-code blob-code-inner js-file-line\"><span class=pl-c1>2</span>\t<span class=pl-c1>0.834722</span>\t<span class=pl-c1>0.360724</span>\t<span class=pl-c1>0.410327</span>\t<span class=pl-c1>0.535236</span></td>\n      </tr>\n      <tr>\n        <td id=\"file-random_dataframe-py-L5\" class=\"blob-num js-line-number\" data-line-number=\"5\"></td>\n        <td id=\"file-random_dataframe-py-LC5\" class=\"blob-code blob-code-inner js-file-line\"><span class=pl-c1>3</span>\t<span class=pl-c1>0.221309</span>\t<span class=pl-c1>0.916424</span>\t<span class=pl-c1>0.649175</span>\t<span class=pl-c1>0.803750</span></td>\n      </tr>\n</table>\n\n\n  </div>\n\n  </div>\n</div>\n\n      </div>\n      <div class=\"gist-meta\">\n        <a href=\"https://gist.github.com/adrianmarkperea/b91dfcdad2b350850cf5dc08f6e56186/raw/70ecf6e7977ea39e8adbbeaa183fdb239c203e34/random_dataframe.py\" style=\"float:right\">view raw</a>\n        <a href=\"https://gist.github.com/adrianmarkperea/b91dfcdad2b350850cf5dc08f6e56186#file-random_dataframe-py\">random_dataframe.py</a>\n        hosted with &#10084; by <a href=\"https://github.com\">GitHub</a>\n      </div>\n    </div>\n</div></p>\n<p>Voila! It was that easy. No more needless saving of random csv files in your computer. Now you can just copy your data and begin mining in a matter of seconds! What a wonderful time to be a data scientist.</p>\n<h3>A Few More Things</h3>\n<p>Under the hood, the pandas.read<em>clipboard() method passes the data you have copied into the pandas.read</em>csv() method, which makes this method that much more powerful. This means that you don’t have to limit yourself to already-clean data. Whatever you can read through read<em>csv, you can read through read</em>clipboard. Take, for example, the following csv file from <a href=\"https://www.kaggle.com/hesh97/titanicdataset-traincsv\">Kaggle’s Titanic data set</a> with the headers removed:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">1,0,3,&quot;Braund, Mr. Owen Harris&quot;,male,22,1,0,A/5 21171,7.25,,S\n2,1,1,&quot;Cumings, Mrs. John Bradley (Florence Briggs Thayer)&quot;,female,38,1,0,PC 17599,71.2833,C85,C\n3,1,3,&quot;Heikkinen, Miss. Laina&quot;,female,26,0,0,STON/O2. 3101282,7.925,,S\n4,1,1,&quot;Futrelle, Mrs. Jacques Heath (Lily May Peel)&quot;,female,35,1,0,113803,53.1,C123,S\n5,0,3,&quot;Allen, Mr. William Henry&quot;,male,35,0,0,373450,8.05,,S\n6,0,3,&quot;Moran, Mr. James&quot;,male,,0,0,330877,8.4583,,Q\n7,0,1,&quot;McCarthy, Mr. Timothy J&quot;,male,54,0,0,17463,51.8625,E46,S\n8,0,3,&quot;Palsson, Master. Gosta Leonard&quot;,male,2,3,1,349909,21.075,,S\n9,1,3,&quot;Johnson, Mrs. Oscar W (Elisabeth Vilhelmina Berg)&quot;,female,27,0,2,347742,11.1333,,S\n10,1,2,&quot;Nasser, Mrs. Nicholas (Adele Achem)&quot;,female,14,1,0,237736,30.0708,,C\n11,1,3,&quot;Sandstrom, Miss. Marguerite Rut&quot;,female,4,1,1,PP 9549,16.7,G6,S\n12,1,1,&quot;Bonnell, Miss. Elizabeth&quot;,female,58,0,0,113783,26.55,C103,S\n13,0,3,&quot;Saundercock, Mr. William Henry&quot;,male,20,0,0,A/5. 2151,8.05,,S\n14,0,3,&quot;Andersson, Mr. Anders Johan&quot;,male,39,1,5,347082,31.275,,S\n15,0,3,&quot;Vestrom, Miss. Hulda Amanda Adolfina&quot;,female,14,0,0,350406,7.8542,,S\n16,1,2,&quot;Hewlett, Mrs. (Mary D Kingcome) &quot;,female,55,0,0,248706,16,,S\n17,0,3,&quot;Rice, Master. Eugene&quot;,male,2,4,1,382652,29.125,,Q\n18,1,2,&quot;Williams, Mr. Charles Eugene&quot;,male,,0,0,244373,13,,S\n19,0,3,&quot;Vander Planke, Mrs. Julius (Emelia Maria Vandemoortele)&quot;,female,31,1,0,345763,18,,S\n20,1,3,&quot;Masselmani, Mrs. Fatima&quot;,female,,0,0,2649,7.225,,C\n21,0,2,&quot;Fynney, Mr. Joseph J&quot;,male,35,0,0,239865,26,,S\n22,1,2,&quot;Beesley, Mr. Lawrence&quot;,male,34,0,0,248698,13,D56,S\n23,1,3,&quot;McGowan, Miss. Anna &quot;&quot;Annie&quot;&quot;&quot;,female,15,0,0,330923,8.0292,,Q\n24,1,1,&quot;Sloper, Mr. William Thompson&quot;,male,28,0,0,113788,35.5,A6,S\n25,0,3,&quot;Palsson, Miss. Torborg Danira&quot;,female,8,3,1,349909,21.075,,S\n26,1,3,&quot;Asplund, Mrs. Carl Oscar (Selma Augusta Emilia Johansson)&quot;,female,38,1,5,347077,31.3875,,S\n27,0,3,&quot;Emir, Mr. Farred Chehab&quot;,male,,0,0,2631,7.225,,C\n28,0,1,&quot;Fortune, Mr. Charles Alexander&quot;,male,19,3,2,19950,263,C23 C25 C27,S</code></pre></div>\n<p>If you copy this and run read_clipboard, you will notice that the data from the first row will be used as headers.</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/2000/1*EpHXyHfp6qkJb2GvQiau8g.png\" alt=\"First Row of Data is Used as Header\"><em>First Row of Data is Used as Header</em></p>\n<p>Just like we would when using read<em>csv, we can pass header=None and names=col</em>names keyword arguments to read_clipboard in order to fix the problem and supply headers while we’re at it. After copying the csv file above, run the following code:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd\n\ncolumns <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token string\">'PassengerId'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Survived'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Pclass'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Name'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'Sex'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Age'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'SibSp'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Parch'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Ticket'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Fare'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'Cabin'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Embarked'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span>\npd<span class=\"token punctuation\">.</span>read_clipboard<span class=\"token punctuation\">(</span>header<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> names<span class=\"token operator\">=</span>columns<span class=\"token punctuation\">)</span></code></pre></div>\n<p><img src=\"https://cdn-images-1.medium.com/max/2190/1*iNHOu_VWN671kGZM_u4rHg.png\" alt=\"That’s Better\"><em>That’s Better</em></p>\n<p>You can see from the image above that the first row was no longer used for the header, and our headers are now properly named. Nice.</p>\n<h3>Final Thoughts</h3>\n<p>There is one caveat in using pd.read<em>clipboard() : it does not work for notebooks running on the cloud or <a href=\"https://scotch.io/bar-talk/trying-the-new-wsl-2-its-fast-windows-subsystem-for-linux\">WSL</a> (sobs in binary). So for those who are working on Jupyter notebooks remotely, I’m sorry to say that you have to stick with using read</em>csv for now.</p>\n<p>Aside from that, it is a useful way to quickly get your hands on data and wrangle right away. It’s a wonderful addition to any data scientist’s arsenal.</p>","frontmatter":{"title":"Pandas Hacks: read_clipboard()","date":"September 30, 2019","description":"Well, it’s not a hack, but it saves you a lot of time"},"fields":{"slug":"/pandas-hacks-reads-clipboard/"}}},"pageContext":{"slug":"/pandas-hacks-reads-clipboard/","previous":null,"next":{"fields":{"slug":"/a-beginners-guide-to-python-and-its-quirks/"},"frontmatter":{"title":"A Beginner’s Guide to Python Quirks and Jargon"}}}}}