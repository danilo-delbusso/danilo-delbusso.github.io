{"componentChunkName":"component---src-templates-blog-post-js","path":"/demystifying-python-decorators-in-less-than-10-minutes/","result":{"data":{"site":{"siteMetadata":{"title":"Danilo Del Busso","social":{"twitter":"danilo_delbusso"}}},"markdownRemark":{"id":"2a8b3a84-7fb7-59d2-ab8d-ad59939c2939","excerpt":"In this quick tutorial, we will learn all about Python decorators. The Python Decorator is syntactic sugar for writing function transformations. This excerpt…","html":"<p>In this quick tutorial, we will learn all about Python decorators.</p>\n<p>The Python Decorator is <a href=\"https://en.wikipedia.org/wiki/Syntactic_sugar\">syntactic sugar</a> for writing <strong>function transformations</strong>. This excerpt from PEP 318 describes the motivation for it:</p>\n<blockquote>\n<p>The current method for <strong>transforming functions</strong> and methods … is awkward and can lead to code that is difficult to understand. Ideally, these <strong>transformations</strong> should be made at the same point in the code where the declaration itself is made.</p>\n</blockquote>\n<p>Understanding decorators, then, is a matter of understanding what function transformations are. Once we understand them, we’ll easily digest decorators.</p>\n<p>So, what <em>are</em> function transformations? The name sounds daunting, but they’re quite simple. By definition, <strong>function transformations</strong> are no more than functions that extend the functionality of other functions, without modifying their original behaviors. They are like toppings on frozen yogurt: they add an extra zing and oomph, but don’t take away the vanilla flavor. They <em>wrap</em> and <em>decorate</em> our functions so that they adhere to a particular representation.</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/2000/0*JtSkqeHbsA_kNvYf.jpg\" alt=\"They are like toppings on froyo: they add an extra zing and oomph but don’t take away the vanilla flavor. Source: [Pixabay](https://pixabay.com/photos/yogurt-fruits-blackberries-currants-2104327/)\"><em>They are like toppings on froyo: they add an extra zing and oomph but don’t take away the vanilla flavor. Source: <a href=\"https://pixabay.com/photos/yogurt-fruits-blackberries-currants-2104327/\">Pixabay</a></em></p>\n<p>This will all clear up once we start going through some examples. Let’s get started.</p>\n<h2>Higher-order Functions</h2>\n<p>Before jumping straight into function transformations, we should first learn about higher-order functions. We will see that function transformations make a lot of use of this concept.</p>\n<p>Higher-order functions are functions that have the following properties:</p>\n<ul>\n<li>They accept functions as arguments</li>\n<li>They return functions as results</li>\n</ul>\n<p>How can higher-order functions be applied to Python? It’s straightforward: functions in Python are first-class objects. This means that like any other objects, functions can:</p>\n<ul>\n<li>be assigned to variables</li>\n<li>be passed as function arguments</li>\n<li>be returned from other functions</li>\n</ul>\n<p>Therefore, we don’t need any special procedures. Python supports higher-order functions right off the bat!</p>\n<p>Let’s see an example:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">say_hello</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f'Hello, </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">}</span></span><span class=\"token string\">!'</span></span><span class=\"token punctuation\">)</span>\n    \n    \n<span class=\"token keyword\">def</span> <span class=\"token function\">say_goodbye</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f'Goodbye, </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">}</span></span><span class=\"token string\">!'</span></span><span class=\"token punctuation\">)</span>\n\n    \n<span class=\"token keyword\">def</span> <span class=\"token function\">say_to_bob</span><span class=\"token punctuation\">(</span>fun<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    fun<span class=\"token punctuation\">(</span><span class=\"token string\">'Bob'</span><span class=\"token punctuation\">)</span>\n    \n    \nsay_to_bob<span class=\"token punctuation\">(</span>say_hello<span class=\"token punctuation\">)</span>\nsay_to_bob<span class=\"token punctuation\">(</span>say_goodbye<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Here, <code class=\"language-text\">say_to_bob</code> is accepting a function parameter fun. We can then use this by passing <code class=\"language-text\">say_hello</code> and <code class=\"language-text\">say_goodbye</code> as arguments to <code class=\"language-text\">say_to_bob</code>.</p>\n<p>Seeing this in action:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">Hello<span class=\"token punctuation\">,</span> Bob!\nGoodbye<span class=\"token punctuation\">,</span> Bob!</code></pre></div>\n<p>Note that when we pass functions as arguments, we don’t include the parentheses. If we do, Python evaluates the function <em>before</em> it gets passed. Often it is easy to spot, since calling the function without the proper arguments will lead to errors:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> say_to_bob<span class=\"token punctuation\">(</span>say_hello<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nTypeError<span class=\"token punctuation\">:</span> say_hello<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> missing <span class=\"token number\">1</span> required positional argument<span class=\"token punctuation\">:</span> <span class=\"token string\">'name'</span></code></pre></div>\n<p>This satisfies the first condition for a higher-order function.</p>\n<p>Now, let’s change the code above to satisfy the second condition:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">say_hello</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f'Hello, </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">}</span></span><span class=\"token string\">!'</span></span><span class=\"token punctuation\">)</span>\n    \n    \n<span class=\"token keyword\">def</span> <span class=\"token function\">say_goodbye</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f'Goodbye, </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">}</span></span><span class=\"token string\">!'</span></span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">get_greeting</span><span class=\"token punctuation\">(</span>greeting<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> greeting <span class=\"token operator\">==</span> <span class=\"token string\">'hello'</span><span class=\"token punctuation\">:</span>\n        greeting_fun <span class=\"token operator\">=</span> say_hello\n    <span class=\"token keyword\">elif</span> greeting <span class=\"token operator\">==</span> <span class=\"token string\">'goodbye'</span><span class=\"token punctuation\">:</span>\n        greeting_fun <span class=\"token operator\">=</span> say_goodbye\n    \n    <span class=\"token keyword\">return</span> greeting_fun\n    \n    \n<span class=\"token keyword\">def</span> <span class=\"token function\">say_to_bob</span><span class=\"token punctuation\">(</span>greeting<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    greeting_fun <span class=\"token operator\">=</span> get_greeting<span class=\"token punctuation\">(</span>greeting<span class=\"token punctuation\">)</span>\n    greeting_fun<span class=\"token punctuation\">(</span><span class=\"token string\">'Bob'</span><span class=\"token punctuation\">)</span>\n    \n    \nsay_to_bob<span class=\"token punctuation\">(</span><span class=\"token string\">'hello'</span><span class=\"token punctuation\">)</span>\nsay_to_bob<span class=\"token punctuation\">(</span><span class=\"token string\">'goodbye'</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>The <code class=\"language-text\">get_greeting</code> function returns a different greeting function depending on the greeting argument. say<em>to</em>bobcalls this function and gets a reference to the appropriate greeting function. It then calls this function with Bob.</p>\n<p>We get the same output:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">Hello<span class=\"token punctuation\">,</span> Bob!\nGoodbye<span class=\"token punctuation\">,</span> Bob!</code></pre></div>\n<p>Note once again that when we return functions, we omit the parentheses.</p>\n<h2>Function Transformations by Hand</h2>\n<p>How can we use higher-order functions to make function transformations?</p>\n<p>Like I mentioned earlier:</p>\n<blockquote>\n<p>By definition, function transformations are no more than functions that extend the functionality of other functions, without modifying their original behaviors.</p>\n</blockquote>\n<p>From this definition, let’s breakdown a function transformation into three properties:</p>\n<ul>\n<li>It’s a higher-order function</li>\n<li>It adds extra functionality to the passed function</li>\n<li>It retains the original functionality of the passed function</li>\n</ul>\n<p>Let’s see an example wherein we add a few debug messages before and after calling a function:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">walkout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Bye Felicia'</span><span class=\"token punctuation\">)</span>\n\n    \n<span class=\"token keyword\">def</span> <span class=\"token function\">debug_transformer</span><span class=\"token punctuation\">(</span>fun<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">wrapper</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f'Function `</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>fun<span class=\"token punctuation\">.</span>__name__<span class=\"token punctuation\">}</span></span><span class=\"token string\">` called'</span></span><span class=\"token punctuation\">)</span>\n        fun<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f'Function `</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>fun<span class=\"token punctuation\">.</span>__name__<span class=\"token punctuation\">}</span></span><span class=\"token string\">` finished'</span></span><span class=\"token punctuation\">)</span>\n        \n    <span class=\"token keyword\">return</span> wrapper\n\n\nwalkout <span class=\"token operator\">=</span> debug_transformer<span class=\"token punctuation\">(</span>walkout<span class=\"token punctuation\">)</span>\nwalkout<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Can you see what happened? Let’s look at the output:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">Function `walkout` called\nBye Felicia\nFunction `walkout` finished</code></pre></div>\n<p>Note that we aren’t doing anything new here. This is the same concept of higher-order functions but in a different pattern.</p>\n<p>We did the transformation of <code class=\"language-text\">walkout</code> in this line:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">walkout <span class=\"token operator\">=</span> debug_transformer<span class=\"token punctuation\">(</span>walkout<span class=\"token punctuation\">)</span></code></pre></div>\n<p>From here, the function <code class=\"language-text\">walkout</code> no longer points to the original function definition. It now points to the <code class=\"language-text\">wrapper</code> function which has refers to our original function:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">wrapper</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f'Function `</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>fun<span class=\"token punctuation\">.</span>__name__<span class=\"token punctuation\">}</span></span><span class=\"token string\">` called'</span></span><span class=\"token punctuation\">)</span>\n    fun<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># Original reference to walkout()</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f'Function `</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>fun<span class=\"token punctuation\">.</span>__name__<span class=\"token punctuation\">}</span></span><span class=\"token string\">` finished'</span></span><span class=\"token punctuation\">)</span></code></pre></div>\n<h2>The @-syntax (Read: Pie-decorator-syntax)</h2>\n<p><img src=\"https://cdn-images-1.medium.com/max/2000/0*9EByYvnh0Y4F_ZqG.jpg\" alt=\"Source: [Pixabay](https://pixabay.com/photos/apple-pie-autumn-dessert-cake-4464826/)\"><em>Source: <a href=\"https://pixabay.com/photos/apple-pie-autumn-dessert-cake-4464826/\">Pixabay</a></em></p>\n<p>As you might have observed, writing function transformations is quite cumbersome. From the simple example above, we had to write <code class=\"language-text\">walkout</code> three times to transform it.</p>\n<p>To simplify this pattern, the Python team introduced the @-syntax. Let’s see how we can use it to simplify our code above:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">debug_transformer</span><span class=\"token punctuation\">(</span>fun<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">wrapper</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f'Function `</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>fun<span class=\"token punctuation\">.</span>__name__<span class=\"token punctuation\">}</span></span><span class=\"token string\">` called'</span></span><span class=\"token punctuation\">)</span>\n        fun<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f'Function `</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>fun<span class=\"token punctuation\">.</span>__name__<span class=\"token punctuation\">}</span></span><span class=\"token string\">` finished'</span></span><span class=\"token punctuation\">)</span>\n        \n    <span class=\"token keyword\">return</span> wrapper\n\n\n<span class=\"token decorator annotation punctuation\">@debug_transformer</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">walkout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Bye Felicia'</span><span class=\"token punctuation\">)</span>\n\nwalkout<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>If you run it, you will get the same results as before:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">Function `walkout` called\nBye Felicia\nFunction `walkout` finished</code></pre></div>\n<p>Much better! Behind the scenes, what the @-syntax does is the following modification:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># Before</span>\nwalkout <span class=\"token operator\">=</span> debug_transformer<span class=\"token punctuation\">(</span>walkout<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># After</span>\n<span class=\"token decorator annotation punctuation\">@debug_transformer</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">walkout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Bye Felicia'</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p><code class=\"language-text\">@debug_transformer</code> is a simplified version of <code class=\"language-text\">walkout=debug_transformer(walkout)</code>. This makes it easier to read code since the decorator and function definition are in the same place. Neat!</p>\n<h2>Vanishing Return Values</h2>\n<p>What happens if we apply our decorator to a function with a return value?</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">debug_transformer</span><span class=\"token punctuation\">(</span>fun<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">wrapper</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f'Function `</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>fun<span class=\"token punctuation\">.</span>__name__<span class=\"token punctuation\">}</span></span><span class=\"token string\">` called'</span></span><span class=\"token punctuation\">)</span>\n        fun<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f'Function `</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>fun<span class=\"token punctuation\">.</span>__name__<span class=\"token punctuation\">}</span></span><span class=\"token string\">` finished'</span></span><span class=\"token punctuation\">)</span>\n        \n    <span class=\"token keyword\">return</span> wrapper\n\n\n<span class=\"token decorator annotation punctuation\">@debug_transformer</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">walkout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Bye Felicia'</span><span class=\"token punctuation\">)</span>\n\n    \n<span class=\"token decorator annotation punctuation\">@debug_transformer</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">get_bob</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">'Bob'</span>\n\nbob <span class=\"token operator\">=</span> get_bob<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>bob<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Which outputs:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">Function `get_bob` called\nFunction `get_bob` finished\n<span class=\"token boolean\">None</span></code></pre></div>\n<p>The decoration works, but we have no more reference to the return value of the original function. To make this work, change the wrapperfunction to return the results of the original function:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">debug_transformer</span><span class=\"token punctuation\">(</span>fun<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">wrapper</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f'Function `</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>fun<span class=\"token punctuation\">.</span>__name__<span class=\"token punctuation\">}</span></span><span class=\"token string\">` called'</span></span><span class=\"token punctuation\">)</span>\n        res <span class=\"token operator\">=</span> fun<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># get reference to original return value</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f'Function `</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>fun<span class=\"token punctuation\">.</span>__name__<span class=\"token punctuation\">}</span></span><span class=\"token string\">` finished'</span></span><span class=\"token punctuation\">)</span>\n        \n        <span class=\"token keyword\">return</span> res\n        \n    <span class=\"token keyword\">return</span> wrapper</code></pre></div>\n<p>We now get our expected output:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> bob <span class=\"token operator\">=</span> get_bob<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nFunction `get_bob` called\nFunction `get_bob` finished\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>bob<span class=\"token punctuation\">)</span>\nBob</code></pre></div>\n<h2>Decorating Functions with Arguments</h2>\n<p>Will our decorator still work if we decorate a function with an argument?</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token decorator annotation punctuation\">@debug_transformer</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">walkout</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f'Bye </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">}</span></span><span class=\"token string\">'</span></span><span class=\"token punctuation\">)</span>\n\n\nwalkout<span class=\"token punctuation\">(</span><span class=\"token string\">'Felicia'</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>This gives us the following error:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">TypeError<span class=\"token punctuation\">:</span> wrapper<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> takes <span class=\"token number\">0</span> positional arguments but <span class=\"token number\">1</span> was given</code></pre></div>\n<p>The problem occurs because the wrapper function is <em>not</em> expecting any arguments. To fix this, we can change it to receive a single argument so our walkout function won’t complain. However, doing so limits the use of our decorator to functions that <em>only</em> receive one argument. We need a generalized solution.</p>\n<p>We can change wrapper to receive an arbitrary number of arguments using <code class=\"language-text\">*args</code> and <code class=\"language-text\">**kwargs</code>. By doing so, we can support functions with <em>any</em> number of arguments:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">debug_transformer</span><span class=\"token punctuation\">(</span>fun<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># Allow wrapper to receive arbitrary args</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">wrapper</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f'Function `</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>fun<span class=\"token punctuation\">.</span>__name__<span class=\"token punctuation\">}</span></span><span class=\"token string\">` called'</span></span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># And pass it to the original function</span>\n        res <span class=\"token operator\">=</span> fun<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f'Function `</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>fun<span class=\"token punctuation\">.</span>__name__<span class=\"token punctuation\">}</span></span><span class=\"token string\">` finished'</span></span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> res\n        \n    <span class=\"token keyword\">return</span> wrapper</code></pre></div>\n<p>Try it out!</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> walkout<span class=\"token punctuation\">(</span><span class=\"token string\">'Dionisia'</span><span class=\"token punctuation\">)</span>\nFunction `walkout` called\nBye Dionisia\nFunction `walkout` finished</code></pre></div>\n<p>Great! It works. You can experiment and see that this solution for functions with any number of arguments.</p>\n<h2>A Couple More Examples</h2>\n<p>You can see that there is no magic involved in creating decorators. Knowing this, your creativity is the only limit in designing them!</p>\n<p>Here are a couple of examples for inspiration:</p>\n<h3>Calling a function many times</h3>\n<p>In this example, the original function is called many times inside the wrapper. The final function call receives the result and returns it.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">call_three_times</span><span class=\"token punctuation\">(</span>fun<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">wrapper</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        fun<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span>\n        fun<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span>\n        res <span class=\"token operator\">=</span> fun<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span>\n        \n        <span class=\"token keyword\">return</span> res\n    \n    <span class=\"token keyword\">return</span> wrapper\n\n\n<span class=\"token decorator annotation punctuation\">@call_three_times</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">say_hey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hey!'</span><span class=\"token punctuation\">)</span>\n\n\nsay_hey<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># Output</span>\nHey!\nHey!\nHey!</code></pre></div>\n<h3>Timing a function</h3>\n<p>Sometimes we want to note how long a function takes to run. We can do this effortlessly with decorators:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> time\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">time_it</span><span class=\"token punctuation\">(</span>fun<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">wrapper</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        start <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        res <span class=\"token operator\">=</span> fun<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span>\n        end <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f'Function took </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>end<span class=\"token operator\">-</span>start<span class=\"token punctuation\">}</span></span><span class=\"token string\">s'</span></span><span class=\"token punctuation\">)</span>\n        \n        <span class=\"token keyword\">return</span> res\n    \n    <span class=\"token keyword\">return</span> wrapper\n\n\n<span class=\"token decorator annotation punctuation\">@time_it</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">waste_time</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">10000000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">pass</span>\n\n    \nwaste_time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># Output</span>\nFunction took <span class=\"token number\">0.</span>18418407440185547s</code></pre></div>\n<p>Simple yet effective! You will see in the next section that decorators gain even more power when used with external libraries.</p>\n<h2>Decorating External Functions</h2>\n<p>How can we apply decorators to external functions if we can’t use the @-syntax to decorate them?</p>\n<p>At the start of the article, we created decorators by calling function transforms directly on the functions. We can do the same thing to external functions! Say we want to apply our <code class=\"language-text\">time_it</code> decorator to the <code class=\"language-text\">np.sort</code> function. We can do the following:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np\n\nrng <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>RandomState<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># Create a lot of numbers</span>\nnums <span class=\"token operator\">=</span> rng<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">(</span><span class=\"token number\">10000000</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># Decorate np.sort with our time_it transformer</span>\ntimed_sort <span class=\"token operator\">=</span> time_it<span class=\"token punctuation\">(</span>np<span class=\"token punctuation\">.</span>sort<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># Perform the sort with our time_it functionality</span>\ntimed_sort<span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Note here that we assigned the decorated <code class=\"language-text\">np.sort</code> to a new name instead of reassigning it to <code class=\"language-text\">np.sort</code>. This allows to keep the original and transformed versions of the function.</p>\n<h2>Conclusion</h2>\n<p>At the beginning of the tutorial, we learned about:</p>\n<ul>\n<li><strong>higher order functions</strong>: functions that accept and return other functions</li>\n<li><strong>function transformations</strong>: a technique of utilizing higher-order functions to add functionality</li>\n</ul>\n<p>Then, we talked about how the @-syntax streamlines creating function transformations. We then made decorators that:</p>\n<ul>\n<li>Preserve the original return value of the function</li>\n<li>Accept an arbitrary number of arguments</li>\n</ul>\n<p>We ended by:</p>\n<ul>\n<li>Seeing creative examples of decorators</li>\n<li>Learning how to decorate external functions</li>\n</ul>\n<p><img src=\"https://cdn-images-1.medium.com/max/2000/0*tcaDJEMpfOECtrtX.jpg\" alt=\"Simple, right?\"><em>Simple, right?</em></p>\n<p>Remember that there’s no magic in creating decorators! They are no more than function transformations written in a funny syntax.</p>\n<h2>Further reading</h2>\n<ul>\n<li><a href=\"https://www.python.org/dev/peps/pep-0318/\">PEP 318</a>. The spec sheet for decorators (and why they call @-syntax the pie-decorator-syntax!)</li>\n<li><a href=\"https://realpython.com/primer-on-python-decorators/\">Real Python Primer on Decorators</a>. More examples of creating decorators.</li>\n<li><a href=\"https://medium.com/swlh/mastering-python-namespaces-and-scopes-7eba67aa3094\">Scopes and Namespaces</a> and <a href=\"http://www.trytoprogram.com/python-programming/python-closures/\">Python Closures</a>. How does the decorator preserve its reference to the original function?</li>\n</ul>","frontmatter":{"title":"Demystifying Python Decorators in 10 Minutes","date":"October 19, 2019","description":"Automatically packaging python functions in pretty little boxes"},"fields":{"slug":"/demystifying-python-decorators-in-less-than-10-minutes/"}}},"pageContext":{"slug":"/demystifying-python-decorators-in-less-than-10-minutes/","previous":{"fields":{"slug":"/mastering-python-namespaces-and-scopes/"},"frontmatter":{"title":"Mastering Python Namespaces and Scopes"}},"next":null}}}